import R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)

export const getPhones = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)
    // contains определяет есть ли строка в подстроке
    const applySearch = item => R.contains(
        // проверяем соответствует ли значение, которое мы ищем. 
        // Находиться ли это значение как подстрока в строке name этого элемента
        state.phonesPage.search, // то что мы хотим проверить
        R.prop('name', item) 
    )
    // проверяем является ли CategoryId внутри этого item нашей активной категорией
    const applyCategory = item => R.equals(
        // берем из item categoryId и проверяем равно ли оно activeCategoryId
        activeCategoryId,
        R.prop('categoryId', item)
    )

    const phones = R.compose(
        R.filter(applySearch),
        // когда у нас есть activeCategoryId, выполняем фильтр с applyCategory
        // always возвр в функцию, то что туда передаем
        R.when(R.always(activeCategoryId), R.filter(applyCategory)),
        R.map(id => getPhoneById(state, id))
    )(state.phonesPage.ids)  // вызываем метод на id страницы
    return phones
    // const phones = R.map(id => getPhoneById(state, id), state.phonesPage.ids)
    // return phones 
}

export const getRenderedPhonesLenght = state => R.length(state.phonesPage.ids)

// вернет длину массива
export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        // проходимся по каждому id, который леижит в basket. И вызываем метод 
        R.sum,
        R.pluck('price'),
        R.map(id => getPhoneById(state, id))
    )(state.basket)

    return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps)  //path будет проверять наличие каждой переменной (params, id, ownProps), перед тем как взять из нее child
                                                                                   // если этот код упадет в любом месте, то нам вернется undefined и наш код не сломается